
App_027_Portfolio_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000b24  00000bb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  0080015c  0080015c  00000c14  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000141a  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c8f  00000000  00000000  00002252  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b4e  00000000  00000000  00002ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  00003a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006dd  00000000  00000000  00003d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007dd  00000000  00000000  00004415  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00004bf2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	15 c1       	rjmp	.+554    	; 0x26c <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e2       	ldi	r30, 0x24	; 36
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 35       	cpi	r26, 0x5C	; 92
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e5       	ldi	r26, 0x5C	; 92
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 37       	cpi	r26, 0x7C	; 124
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	15 d1       	rcall	.+554    	; 0x2ee <main>
  c4:	2d c5       	rjmp	.+2650   	; 0xb20 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Button_Init>:

#include "Button.h"

void Button_Init()
{
	BUTTON_MODE_DDR &= ~(1<<BUTTON_MODE);
  c8:	d0 98       	cbi	0x1a, 0	; 26
	BUTTON_STATE_DDR &= ~(1<<BUTTON_STATE);
  ca:	d1 98       	cbi	0x1a, 1	; 26
  cc:	08 95       	ret

000000ce <GetButton>:
}
uint8_t GetButton(uint8_t button, uint8_t *prevButtonState)
{
	uint8_t curButtonState = 1;
	
	curButtonState = (PINA & (1<<button)) >> button;
  ce:	49 b3       	in	r20, 0x19	; 25
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	08 2e       	mov	r0, r24
  d6:	02 c0       	rjmp	.+4      	; 0xdc <GetButton+0xe>
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <GetButton+0xa>
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	24 23       	and	r18, r20
  e4:	35 23       	and	r19, r21
  e6:	a9 01       	movw	r20, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <GetButton+0x20>
  ea:	55 95       	asr	r21
  ec:	47 95       	ror	r20
  ee:	8a 95       	dec	r24
  f0:	e2 f7       	brpl	.-8      	; 0xea <GetButton+0x1c>
	if ( (curButtonState == 0) && (*prevButtonState == 1) ) //if button has kept pressed, isn't work
  f2:	41 11       	cpse	r20, r1
  f4:	07 c0       	rjmp	.+14     	; 0x104 <GetButton+0x36>
  f6:	fb 01       	movw	r30, r22
  f8:	80 81       	ld	r24, Z
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	61 f4       	brne	.+24     	; 0x116 <GetButton+0x48>
	{
		*prevButtonState = curButtonState;
  fe:	10 82       	st	Z, r1
		return 0;
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	08 95       	ret
	}
	else if ( (curButtonState == 1) && (*prevButtonState == 0) ) //if button has kept pressed, isn't work
 104:	41 30       	cpi	r20, 0x01	; 1
 106:	49 f4       	brne	.+18     	; 0x11a <GetButton+0x4c>
 108:	fb 01       	movw	r30, r22
 10a:	80 81       	ld	r24, Z
 10c:	81 11       	cpse	r24, r1
 10e:	07 c0       	rjmp	.+14     	; 0x11e <GetButton+0x50>
	{
		*prevButtonState = curButtonState;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 83       	st	Z, r24
		return 1;
 114:	08 95       	ret
	}
	return 0;
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	08 95       	ret
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	08 95       	ret
 11e:	80 e0       	ldi	r24, 0x00	; 0
}
 120:	08 95       	ret

00000122 <GetModeButton>:
	BUTTON_STATE_DDR &= ~(1<<BUTTON_STATE);
}
uint8_t GetModeButton() //if push the button_0
{
	static uint8_t prevModeButtonState = 1; 
	return GetButton(BUTTON_MODE, &prevModeButtonState); //changed at low edge
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	71 e0       	ldi	r23, 0x01	; 1
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	d2 cf       	rjmp	.-92     	; 0xce <GetButton>
}
 12a:	08 95       	ret

0000012c <GetStateButton>:
uint8_t GetStateButton() //if push the button_1
{
	static uint8_t prevSignalButtonState = 1;
	return GetButton(BUTTON_STATE, &prevSignalButtonState); //changed at low edge
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	71 e0       	ldi	r23, 0x01	; 1
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	cd cf       	rjmp	.-102    	; 0xce <GetButton>
}
 134:	08 95       	ret

00000136 <LCD_pulse_enable>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	91 9a       	sbi	0x12, 1	; 18
 138:	8f e9       	ldi	r24, 0x9F	; 159
 13a:	9f e0       	ldi	r25, 0x0F	; 15
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_pulse_enable+0x6>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_pulse_enable+0xc>
 142:	00 00       	nop
 144:	91 98       	cbi	0x12, 1	; 18
 146:	8f e9       	ldi	r24, 0x9F	; 159
 148:	9f e0       	ldi	r25, 0x0F	; 15
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_pulse_enable+0x14>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_pulse_enable+0x1a>
 150:	00 00       	nop
 152:	08 95       	ret

00000154 <LCD_WriteCommand>:
 154:	cf 93       	push	r28
 156:	c8 2f       	mov	r28, r24
 158:	90 98       	cbi	0x12, 0	; 18
 15a:	82 b3       	in	r24, 0x12	; 18
 15c:	8f 70       	andi	r24, 0x0F	; 15
 15e:	9c 2f       	mov	r25, r28
 160:	90 7f       	andi	r25, 0xF0	; 240
 162:	89 2b       	or	r24, r25
 164:	82 bb       	out	0x12, r24	; 18
 166:	e7 df       	rcall	.-50     	; 0x136 <LCD_pulse_enable>
 168:	82 b3       	in	r24, 0x12	; 18
 16a:	28 2f       	mov	r18, r24
 16c:	2f 70       	andi	r18, 0x0F	; 15
 16e:	30 e1       	ldi	r19, 0x10	; 16
 170:	c3 9f       	mul	r28, r19
 172:	c0 01       	movw	r24, r0
 174:	11 24       	eor	r1, r1
 176:	82 2b       	or	r24, r18
 178:	82 bb       	out	0x12, r24	; 18
 17a:	dd df       	rcall	.-70     	; 0x136 <LCD_pulse_enable>
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <LCD_goto_XY>:
	row %= 2;	// [0  1]
	
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	
	LCD_WriteCommand(command); //move cursor
 180:	81 70       	andi	r24, 0x01	; 1
 182:	6f 70       	andi	r22, 0x0F	; 15
 184:	90 e4       	ldi	r25, 0x40	; 64
 186:	89 9f       	mul	r24, r25
 188:	60 0d       	add	r22, r0
 18a:	11 24       	eor	r1, r1
 18c:	86 2f       	mov	r24, r22
 18e:	80 58       	subi	r24, 0x80	; 128
 190:	e1 cf       	rjmp	.-62     	; 0x154 <LCD_WriteCommand>
 192:	08 95       	ret

00000194 <LCD_WriteCommandInit>:
	LCD_DATA_PORT = (LCD_RS_PORT & 0x0f) | ( (cmdData & 0x0f)<<4 ); //4bit shift, and output lower 4bits
	LCD_pulse_enable();
}
void LCD_WriteCommandInit(uint8_t cmdData)
{
	LCD_RS_PORT &= ~(1<<LCD_RS);  //RS low
 194:	90 98       	cbi	0x12, 0	; 18
	LCD_DATA_PORT = (LCD_RS_PORT & 0x0f) | (cmdData & 0xf0); //cmdData output upper 4bit
 196:	92 b3       	in	r25, 0x12	; 18
 198:	9f 70       	andi	r25, 0x0F	; 15
 19a:	80 7f       	andi	r24, 0xF0	; 240
 19c:	89 2b       	or	r24, r25
 19e:	82 bb       	out	0x12, r24	; 18
	LCD_pulse_enable();
 1a0:	ca cf       	rjmp	.-108    	; 0x136 <LCD_pulse_enable>
 1a2:	08 95       	ret

000001a4 <LCD_Init>:
	LCD_WriteCommand(COMMAND_CLEAR_DISPLAY);
	_delay_ms(2);
}
void LCD_Init()
{
	LCD_DATA_DDR = 0xff;
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	81 bb       	out	0x11, r24	; 17
	LCD_RS_DDR |= (1<<LCD_RS);
 1a8:	88 9a       	sbi	0x11, 0	; 17
	LCD_ENABLE_DDR |= (1<<LCD_ENABLE);
 1aa:	89 9a       	sbi	0x11, 1	; 17
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	89 ef       	ldi	r24, 0xF9	; 249
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <LCD_Init+0xe>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_Init+0x18>
 1bc:	00 00       	nop
	
	_delay_ms(20);	//requires more 15ms on hardware
	LCD_WriteCommandInit(0x30);
 1be:	80 e3       	ldi	r24, 0x30	; 48
 1c0:	e9 df       	rcall	.-46     	; 0x194 <LCD_WriteCommandInit>
 1c2:	8f e1       	ldi	r24, 0x1F	; 31
 1c4:	9e e4       	ldi	r25, 0x4E	; 78
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCD_Init+0x22>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <LCD_Init+0x28>
 1cc:	00 00       	nop
	_delay_ms(5);	//requires more 4ms on hardware
	LCD_WriteCommandInit(0x30);
 1ce:	80 e3       	ldi	r24, 0x30	; 48
 1d0:	e1 df       	rcall	.-62     	; 0x194 <LCD_WriteCommandInit>
 1d2:	9f ef       	ldi	r25, 0xFF	; 255
 1d4:	23 ec       	ldi	r18, 0xC3	; 195
 1d6:	89 e0       	ldi	r24, 0x09	; 9
 1d8:	91 50       	subi	r25, 0x01	; 1
 1da:	20 40       	sbci	r18, 0x00	; 0
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <LCD_Init+0x34>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_Init+0x3e>
	_delay_ms(200); //requires more 100ms on hardware
	LCD_WriteCommandInit(0x30);
 1e2:	00 00       	nop
 1e4:	80 e3       	ldi	r24, 0x30	; 48
	LCD_WriteCommandInit(COMMAND_4_BIT_MODE);
 1e6:	d6 df       	rcall	.-84     	; 0x194 <LCD_WriteCommandInit>
 1e8:	88 e2       	ldi	r24, 0x28	; 40
	LCD_WriteCommand(COMMAND_4_BIT_MODE);			
 1ea:	d4 df       	rcall	.-88     	; 0x194 <LCD_WriteCommandInit>
 1ec:	88 e2       	ldi	r24, 0x28	; 40
	LCD_WriteCommand(COMMAND_DISPLAY_OFF);
 1ee:	b2 df       	rcall	.-156    	; 0x154 <LCD_WriteCommand>
 1f0:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteCommand(COMMAND_CLEAR_DISPLAY);
 1f2:	b0 df       	rcall	.-160    	; 0x154 <LCD_WriteCommand>
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	ae df       	rcall	.-164    	; 0x154 <LCD_WriteCommand>
	LCD_WriteCommand(COMMAND_ENTRY_MODE);	
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	ac df       	rcall	.-168    	; 0x154 <LCD_WriteCommand>
 1fc:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteCommand(COMMAND_DISPLAY_ON);
 1fe:	aa cf       	rjmp	.-172    	; 0x154 <LCD_WriteCommand>
 200:	08 95       	ret

00000202 <LCD_WriteData>:
 202:	cf 93       	push	r28
 204:	c8 2f       	mov	r28, r24
	LCD_DATA_PORT = (LCD_RS_PORT & 0x0f) | (cmdData & 0xf0); //cmdData output upper 4bit
	LCD_pulse_enable();
}
void LCD_WriteData(uint8_t data)
{
	LCD_RS_PORT |= (1<<LCD_RS);  //RS high
 206:	90 9a       	sbi	0x12, 0	; 18
	LCD_DATA_PORT = (LCD_RS_PORT & 0x0f) | (data & 0xf0); //data output output upper 4bits
 208:	82 b3       	in	r24, 0x12	; 18
 20a:	8f 70       	andi	r24, 0x0F	; 15
 20c:	9c 2f       	mov	r25, r28
 20e:	90 7f       	andi	r25, 0xF0	; 240
 210:	89 2b       	or	r24, r25
 212:	82 bb       	out	0x12, r24	; 18
	LCD_pulse_enable();
 214:	90 df       	rcall	.-224    	; 0x136 <LCD_pulse_enable>
	LCD_DATA_PORT = (LCD_RS_PORT & 0x0f) | ( (data & 0x0f)<<4 ); //shift, and output lower 4bits
 216:	82 b3       	in	r24, 0x12	; 18
 218:	28 2f       	mov	r18, r24
 21a:	2f 70       	andi	r18, 0x0F	; 15
 21c:	30 e1       	ldi	r19, 0x10	; 16
 21e:	c3 9f       	mul	r28, r19
 220:	c0 01       	movw	r24, r0
 222:	11 24       	eor	r1, r1
 224:	82 2b       	or	r24, r18
	LCD_pulse_enable();
 226:	82 bb       	out	0x12, r24	; 18
 228:	86 df       	rcall	.-244    	; 0x136 <LCD_pulse_enable>
}
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <LCD_write_string>:
	LCD_WriteCommand(COMMAND_CLEAR_DISPLAY);
	LCD_WriteCommand(COMMAND_ENTRY_MODE);	
	LCD_WriteCommand(COMMAND_DISPLAY_ON);
}
void LCD_write_string(char *string)
{
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	fc 01       	movw	r30, r24
	for(uint8_t i=0; i<string[i]; i++) //until access on a null value
 236:	80 81       	ld	r24, Z
 238:	88 23       	and	r24, r24
 23a:	51 f0       	breq	.+20     	; 0x250 <LCD_write_string+0x22>
 23c:	8f 01       	movw	r16, r30
 23e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_WriteData(string[i]); //output string units
 240:	e0 df       	rcall	.-64     	; 0x202 <LCD_WriteData>
	LCD_WriteCommand(COMMAND_ENTRY_MODE);	
	LCD_WriteCommand(COMMAND_DISPLAY_ON);
}
void LCD_write_string(char *string)
{
	for(uint8_t i=0; i<string[i]; i++) //until access on a null value
 242:	cf 5f       	subi	r28, 0xFF	; 255
 244:	f8 01       	movw	r30, r16
 246:	ec 0f       	add	r30, r28
 248:	f1 1d       	adc	r31, r1
 24a:	80 81       	ld	r24, Z
 24c:	c8 17       	cp	r28, r24
 24e:	c0 f3       	brcs	.-16     	; 0x240 <LCD_write_string+0x12>
	{
		LCD_WriteData(string[i]); //output string units
	}
}
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	08 95       	ret

00000258 <LED_Init>:
 */ 
#include "LED.h"

void LED_Init()
{
	LED_DDR |= (1<<LED_AUTO) | (1<<LED_MANUAL);
 258:	8a b3       	in	r24, 0x1a	; 26
 25a:	88 62       	ori	r24, 0x28	; 40
 25c:	8a bb       	out	0x1a, r24	; 26
 25e:	08 95       	ret

00000260 <Auto_LED>:
}
void Auto_LED() //turn on the LED, at auto mode
{
	LED_PORT = 0x08;
 260:	88 e0       	ldi	r24, 0x08	; 8
 262:	8b bb       	out	0x1b, r24	; 27
 264:	08 95       	ret

00000266 <Manual_LED>:
}
void Manual_LED() //turn on the LED, at manual mode
{
	LED_PORT = 0x20;
 266:	80 e2       	ldi	r24, 0x20	; 32
 268:	8b bb       	out	0x1b, r24	; 27
 26a:	08 95       	ret

0000026c <__vector_16>:

uint8_t trafficMode = AUTO; //traffic light mode's default
char buff[20] = {0}; //string for LCD output

ISR(TIMER0_OVF_vect)
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	0b b6       	in	r0, 0x3b	; 59
 278:	0f 92       	push	r0
 27a:	2f 93       	push	r18
 27c:	3f 93       	push	r19
 27e:	4f 93       	push	r20
 280:	5f 93       	push	r21
 282:	6f 93       	push	r22
 284:	7f 93       	push	r23
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
 28a:	af 93       	push	r26
 28c:	bf 93       	push	r27
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
	ClockTimeCount(); //time counter for time clock
 292:	75 d0       	rcall	.+234    	; 0x37e <ClockTimeCount>
	TrafficLightCounter(); //time counter for traffic light
 294:	b5 d0       	rcall	.+362    	; 0x400 <TrafficLightCounter>
 296:	ff 91       	pop	r31
}
 298:	ef 91       	pop	r30
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0b be       	out	0x3b, r0	; 59
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <TimerClock_Init>:
 2bc:	83 b7       	in	r24, 0x33	; 51
void TimerClock_Init()
{
	TCCR0 |= (1<<CS02) | (0<<CS01) | (0<<CS00); //set the 64 division
 2be:	84 60       	ori	r24, 0x04	; 4
 2c0:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);
 2c2:	87 b7       	in	r24, 0x37	; 55
 2c4:	81 60       	ori	r24, 0x01	; 1
 2c6:	87 bf       	out	0x37, r24	; 55
	TCNT0=5; //1 ms count
 2c8:	85 e0       	ldi	r24, 0x05	; 5
 2ca:	82 bf       	out	0x32, r24	; 50
 2cc:	08 95       	ret

000002ce <Mode_Change>:
}
void Mode_Change(uint8_t FromChangeMode, uint8_t ToChangeMode) // function for mode change
{
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	c8 2f       	mov	r28, r24
 2d4:	d6 2f       	mov	r29, r22
	if( GetModeButton() && (trafficMode == FromChangeMode) )
 2d6:	25 df       	rcall	.-438    	; 0x122 <GetModeButton>
 2d8:	88 23       	and	r24, r24
 2da:	31 f0       	breq	.+12     	; 0x2e8 <Mode_Change+0x1a>
 2dc:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <trafficMode>
 2e0:	8c 13       	cpse	r24, r28
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <Mode_Change+0x1a>
	{
		trafficMode = ToChangeMode;
 2e4:	d0 93 70 01 	sts	0x0170, r29	; 0x800170 <trafficMode>
	}
}
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <main>:
int main(void)
{
	Button_Init();
 2ee:	ec de       	rcall	.-552    	; 0xc8 <Button_Init>
	LCD_Init();
 2f0:	59 df       	rcall	.-334    	; 0x1a4 <LCD_Init>
	LED_Init();
 2f2:	b2 df       	rcall	.-156    	; 0x258 <LED_Init>
	TimerClock_Init();
 2f4:	e3 df       	rcall	.-58     	; 0x2bc <TimerClock_Init>
 2f6:	90 d0       	rcall	.+288    	; 0x418 <TrafficLight_Init>
	TrafficLight_Init();
 2f8:	78 94       	sei
 2fa:	02 e0       	ldi	r16, 0x02	; 2

	sei();
	
	while (1)
	{
		sprintf(buff, "Time: %02d:%02d:%02d ",GetHour(),GetMinu(),GetSec()); //current time output on LCD
 2fc:	11 e0       	ldi	r17, 0x01	; 1
 2fe:	cc e5       	ldi	r28, 0x5C	; 92
 300:	d1 e0       	ldi	r29, 0x01	; 1
 302:	7b d0       	rcall	.+246    	; 0x3fa <GetSec>
 304:	e8 2e       	mov	r14, r24
 306:	76 d0       	rcall	.+236    	; 0x3f4 <GetMinu>
 308:	f8 2e       	mov	r15, r24
 30a:	71 d0       	rcall	.+226    	; 0x3ee <GetHour>
 30c:	1f 92       	push	r1
 30e:	ef 92       	push	r14
 310:	1f 92       	push	r1
 312:	ff 92       	push	r15
 314:	1f 92       	push	r1
 316:	8f 93       	push	r24
 318:	1f 93       	push	r17
 31a:	0f 93       	push	r16
 31c:	df 93       	push	r29
 31e:	cf 93       	push	r28
 320:	24 d1       	rcall	.+584    	; 0x56a <sprintf>
		LCD_goto_XY(0,0); //at the first line
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	2c df       	rcall	.-424    	; 0x180 <LCD_goto_XY>
 328:	ce 01       	movw	r24, r28
		LCD_write_string(buff);
 32a:	81 df       	rcall	.-254    	; 0x22e <LCD_write_string>
 32c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <trafficMode>
		
		if(trafficMode == AUTO)
 330:	2d b7       	in	r18, 0x3d	; 61
 332:	3e b7       	in	r19, 0x3e	; 62
 334:	26 5f       	subi	r18, 0xF6	; 246
 336:	3f 4f       	sbci	r19, 0xFF	; 255
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	f8 94       	cli
 33c:	3e bf       	out	0x3e, r19	; 62
 33e:	0f be       	out	0x3f, r0	; 63
 340:	2d bf       	out	0x3d, r18	; 61
		{	
			getColor(buff); //traffic light state output on LCD
 342:	81 11       	cpse	r24, r1
 344:	0d c0       	rjmp	.+26     	; 0x360 <main+0x72>
			LCD_goto_XY(1,0); //at the second line
 346:	ce 01       	movw	r24, r28
 348:	e5 d0       	rcall	.+458    	; 0x514 <getColor>
 34a:	60 e0       	ldi	r22, 0x00	; 0
			LCD_write_string(buff);
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	18 df       	rcall	.-464    	; 0x180 <LCD_goto_XY>
			Auto_mode(); 
 350:	ce 01       	movw	r24, r28
			Auto_LED(); 
 352:	6d df       	rcall	.-294    	; 0x22e <LCD_write_string>
			Mode_Change(AUTO,MANUAL); 
 354:	9b d0       	rcall	.+310    	; 0x48c <Auto_mode>
 356:	84 df       	rcall	.-248    	; 0x260 <Auto_LED>
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if (trafficMode == MANUAL)
 35c:	b8 df       	rcall	.-144    	; 0x2ce <Mode_Change>
 35e:	d1 cf       	rjmp	.-94     	; 0x302 <main+0x14>
		{
			getColor(buff); //traffic light state output on LCD
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	79 f6       	brne	.-98     	; 0x302 <main+0x14>
 364:	ce 01       	movw	r24, r28
			LCD_goto_XY(1,0); //at the second line
 366:	d6 d0       	rcall	.+428    	; 0x514 <getColor>
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	09 df       	rcall	.-494    	; 0x180 <LCD_goto_XY>
			LCD_write_string(buff);
 36e:	ce 01       	movw	r24, r28
 370:	5e df       	rcall	.-324    	; 0x22e <LCD_write_string>
 372:	b2 d0       	rcall	.+356    	; 0x4d8 <Manual_mode>
			Manual_mode();
 374:	78 df       	rcall	.-272    	; 0x266 <Manual_LED>
 376:	60 e0       	ldi	r22, 0x00	; 0
			Manual_LED();
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	a9 df       	rcall	.-174    	; 0x2ce <Mode_Change>
			Mode_Change(MANUAL,AUTO);
 37c:	c2 cf       	rjmp	.-124    	; 0x302 <main+0x14>

0000037e <ClockTimeCount>:
volatile uint8_t sec=0, minu=0, hour=0; 
volatile uint16_t timeCount_system=0;

void ClockTimeCount() //count time as interrupt
{
	timeCount_system++; 
 37e:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <timeCount_system>
 382:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <timeCount_system+0x1>
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <timeCount_system+0x1>
 38c:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <timeCount_system>
	if (timeCount_system >= 1000)
 390:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <timeCount_system>
 394:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <timeCount_system+0x1>
 398:	88 3e       	cpi	r24, 0xE8	; 232
 39a:	93 40       	sbci	r25, 0x03	; 3
 39c:	28 f1       	brcs	.+74     	; 0x3e8 <ClockTimeCount+0x6a>
	{
		timeCount_system = 0;
 39e:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <timeCount_system+0x1>
 3a2:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <timeCount_system>
		sec++;
 3a6:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <sec>
 3aa:	8f 5f       	subi	r24, 0xFF	; 255
 3ac:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <sec>
		if (sec >= 60)
 3b0:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <sec>
 3b4:	8c 33       	cpi	r24, 0x3C	; 60
 3b6:	38 f0       	brcs	.+14     	; 0x3c6 <ClockTimeCount+0x48>
		{
			sec = 0;
 3b8:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <sec>
			minu++;
 3bc:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <minu>
 3c0:	8f 5f       	subi	r24, 0xFF	; 255
 3c2:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <minu>
		}
		if (minu >= 60)
 3c6:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <minu>
 3ca:	8c 33       	cpi	r24, 0x3C	; 60
 3cc:	38 f0       	brcs	.+14     	; 0x3dc <ClockTimeCount+0x5e>
		{
			minu = 0;
 3ce:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <minu>
			hour++;
 3d2:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <hour>
 3d6:	8f 5f       	subi	r24, 0xFF	; 255
 3d8:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <hour>
		}
		if (hour >= 24)
 3dc:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <hour>
 3e0:	88 31       	cpi	r24, 0x18	; 24
 3e2:	10 f0       	brcs	.+4      	; 0x3e8 <ClockTimeCount+0x6a>
		{
			hour = 0;
 3e4:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <hour>
		}
	}
	TCNT0=5;
 3e8:	85 e0       	ldi	r24, 0x05	; 5
 3ea:	82 bf       	out	0x32, r24	; 50
 3ec:	08 95       	ret

000003ee <GetHour>:
}
uint8_t GetHour()  //return hours as a constant
{
	return hour;
 3ee:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <hour>
}
 3f2:	08 95       	ret

000003f4 <GetMinu>:
uint8_t GetMinu() //return minutes as a constant
{
	return minu;
 3f4:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <minu>
}
 3f8:	08 95       	ret

000003fa <GetSec>:
uint8_t GetSec() //return seconds as constant
{
	return sec;
 3fa:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <sec>
}
 3fe:	08 95       	ret

00000400 <TrafficLightCounter>:
volatile uint8_t state = VRHG;
volatile uint16_t TrafficCount = 0;

void TrafficLightCounter(void)
{
	TrafficCount++;
 400:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <TrafficCount>
 404:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <TrafficCount+0x1>
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <TrafficCount+0x1>
 40e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <TrafficCount>
	TCNT0=5;
 412:	85 e0       	ldi	r24, 0x05	; 5
 414:	82 bf       	out	0x32, r24	; 50
 416:	08 95       	ret

00000418 <TrafficLight_Init>:
}
void TrafficLight_Init()
{
	TRAFFIC_LIGHT_DDR |= (1<<VERTICAL_RED) | (1<<VERTICAL_YELLOW) | (1<<VERTICAL_GREEN) 
 418:	84 b3       	in	r24, 0x14	; 20
 41a:	8f 63       	ori	r24, 0x3F	; 63
 41c:	84 bb       	out	0x14, r24	; 20
 41e:	08 95       	ret

00000420 <SetTrafficLight>:
	| (1<<HORIZONTAL_RED) | (1<<HORIZONTAL_YELLOW) | (1<<HORIZONTAL_GREEN);
}
void SetTrafficLight(uint8_t setLED)
{
	TRAFFIC_LIGHT_PORT &= ~( (1<<VERTICAL_RED) | (1<<VERTICAL_YELLOW) | (1<<VERTICAL_GREEN) 
 420:	95 b3       	in	r25, 0x15	; 21
 422:	90 7c       	andi	r25, 0xC0	; 192
 424:	95 bb       	out	0x15, r25	; 21
	| (1<<HORIZONTAL_RED) | (1<<HORIZONTAL_YELLOW) | (1<<HORIZONTAL_GREEN));
	TRAFFIC_LIGHT_PORT |= setLED;
 426:	95 b3       	in	r25, 0x15	; 21
 428:	89 2b       	or	r24, r25
 42a:	85 bb       	out	0x15, r24	; 21
 42c:	08 95       	ret

0000042e <Next_AutoState>:
void Next_AutoState(uint8_t next_state, uint16_t delay_time)
{//change the next states after the delay 
	static uint16_t pretime;
	static uint8_t flag = 0;
	
	if(flag == 0)
 42e:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <flag.1837>
 432:	91 11       	cpse	r25, r1
 434:	0c c0       	rjmp	.+24     	; 0x44e <Next_AutoState+0x20>
	{
		flag = 1;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <flag.1837>
		pretime = TrafficCount;
 43c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <TrafficCount>
 440:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <TrafficCount+0x1>
 444:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <pretime.1836+0x1>
 448:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <pretime.1836>
		return;
 44c:	08 95       	ret
	}
	if((TrafficCount - pretime) >= delay_time)
 44e:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <TrafficCount>
 452:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <TrafficCount+0x1>
 456:	40 91 76 01 	lds	r20, 0x0176	; 0x800176 <pretime.1836>
 45a:	50 91 77 01 	lds	r21, 0x0177	; 0x800177 <pretime.1836+0x1>
 45e:	24 1b       	sub	r18, r20
 460:	35 0b       	sbc	r19, r21
 462:	26 17       	cp	r18, r22
 464:	37 07       	cpc	r19, r23
 466:	40 f0       	brcs	.+16     	; 0x478 <Next_AutoState+0x4a>
	{
		TrafficCount = 0;
 468:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <TrafficCount+0x1>
 46c:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <TrafficCount>
		flag = 0;
 470:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <flag.1837>
		state = next_state;
 474:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <state>
 478:	08 95       	ret

0000047a <Next_ManualState>:
	}
}
void Next_ManualState(uint8_t next_state)
{//change the next states when pressed button_1
 47a:	cf 93       	push	r28
 47c:	c8 2f       	mov	r28, r24
	if(GetStateButton()==1)
 47e:	56 de       	rcall	.-852    	; 0x12c <GetStateButton>
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	11 f4       	brne	.+4      	; 0x488 <Next_ManualState+0xe>
	{
		state = next_state;
 484:	c0 93 7b 01 	sts	0x017B, r28	; 0x80017b <state>
	}
}
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <Auto_mode>:
void Auto_mode()
{
	switch(state)
 48c:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <state>
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	69 f0       	breq	.+26     	; 0x4ae <Auto_mode+0x22>
 494:	28 f0       	brcs	.+10     	; 0x4a0 <Auto_mode+0x14>
 496:	82 30       	cpi	r24, 0x02	; 2
 498:	89 f0       	breq	.+34     	; 0x4bc <Auto_mode+0x30>
 49a:	83 30       	cpi	r24, 0x03	; 3
 49c:	b1 f0       	breq	.+44     	; 0x4ca <Auto_mode+0x3e>
 49e:	08 95       	ret
	{
		case VRHG:
		SetTrafficLight( (1<<VERTICAL_RED) | (1<<HORIZONTAL_GREEN));
 4a0:	84 e2       	ldi	r24, 0x24	; 36
 4a2:	be df       	rcall	.-132    	; 0x420 <SetTrafficLight>
		Next_AutoState(VRHY, 5000);
 4a4:	68 e8       	ldi	r22, 0x88	; 136
 4a6:	73 e1       	ldi	r23, 0x13	; 19
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	c1 cf       	rjmp	.-126    	; 0x42e <Next_AutoState>
		break;
		
		case VRHY:
		SetTrafficLight( (1<<VERTICAL_RED) | (1<<HORIZONTAL_YELLOW));
 4ac:	08 95       	ret
 4ae:	84 e1       	ldi	r24, 0x14	; 20
 4b0:	b7 df       	rcall	.-146    	; 0x420 <SetTrafficLight>
		Next_AutoState(VGHR, 2000);
 4b2:	60 ed       	ldi	r22, 0xD0	; 208
 4b4:	77 e0       	ldi	r23, 0x07	; 7
 4b6:	82 e0       	ldi	r24, 0x02	; 2
		break;
 4b8:	ba cf       	rjmp	.-140    	; 0x42e <Next_AutoState>
		
		case VGHR:
		SetTrafficLight( (1<<VERTICAL_GREEN) | (1<<HORIZONTAL_RED));
 4ba:	08 95       	ret
 4bc:	89 e0       	ldi	r24, 0x09	; 9
		Next_AutoState(VYHR, 5000);
 4be:	b0 df       	rcall	.-160    	; 0x420 <SetTrafficLight>
 4c0:	68 e8       	ldi	r22, 0x88	; 136
 4c2:	73 e1       	ldi	r23, 0x13	; 19
 4c4:	83 e0       	ldi	r24, 0x03	; 3
		break;
		
		case VYHR:
		SetTrafficLight( (1<<VERTICAL_YELLOW) | (1<<HORIZONTAL_RED));
 4c6:	b3 cf       	rjmp	.-154    	; 0x42e <Next_AutoState>
 4c8:	08 95       	ret
 4ca:	8a e0       	ldi	r24, 0x0A	; 10
		Next_AutoState(VRHG, 2000);
 4cc:	a9 df       	rcall	.-174    	; 0x420 <SetTrafficLight>
 4ce:	60 ed       	ldi	r22, 0xD0	; 208
 4d0:	77 e0       	ldi	r23, 0x07	; 7
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	ac cf       	rjmp	.-168    	; 0x42e <Next_AutoState>
 4d6:	08 95       	ret

000004d8 <Manual_mode>:
		break;
	}
}
void Manual_mode()
{
	switch(state)
 4d8:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <state>
 4dc:	81 30       	cpi	r24, 0x01	; 1
 4de:	59 f0       	breq	.+22     	; 0x4f6 <Manual_mode+0x1e>
 4e0:	28 f0       	brcs	.+10     	; 0x4ec <Manual_mode+0x14>
 4e2:	82 30       	cpi	r24, 0x02	; 2
 4e4:	69 f0       	breq	.+26     	; 0x500 <Manual_mode+0x28>
 4e6:	83 30       	cpi	r24, 0x03	; 3
 4e8:	81 f0       	breq	.+32     	; 0x50a <Manual_mode+0x32>
 4ea:	08 95       	ret
	{
		case VRHG:
		SetTrafficLight( (1<<VERTICAL_RED) | (1<<HORIZONTAL_GREEN));
 4ec:	84 e2       	ldi	r24, 0x24	; 36
 4ee:	98 df       	rcall	.-208    	; 0x420 <SetTrafficLight>
		Next_ManualState(VRHY);
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	c3 cf       	rjmp	.-122    	; 0x47a <Next_ManualState>
		break;
		
		case VRHY:
		SetTrafficLight( (1<<VERTICAL_RED) | (1<<HORIZONTAL_YELLOW));
 4f4:	08 95       	ret
 4f6:	84 e1       	ldi	r24, 0x14	; 20
		Next_ManualState(VGHR);
 4f8:	93 df       	rcall	.-218    	; 0x420 <SetTrafficLight>
 4fa:	82 e0       	ldi	r24, 0x02	; 2
		break;
		
		case VGHR:
		SetTrafficLight( (1<<VERTICAL_GREEN) | (1<<HORIZONTAL_RED));
 4fc:	be cf       	rjmp	.-132    	; 0x47a <Next_ManualState>
 4fe:	08 95       	ret
		Next_ManualState(VYHR);
 500:	89 e0       	ldi	r24, 0x09	; 9
 502:	8e df       	rcall	.-228    	; 0x420 <SetTrafficLight>
		break;
 504:	83 e0       	ldi	r24, 0x03	; 3
		
		case VYHR:
		SetTrafficLight( (1<<VERTICAL_YELLOW) | (1<<HORIZONTAL_RED));
 506:	b9 cf       	rjmp	.-142    	; 0x47a <Next_ManualState>
 508:	08 95       	ret
 50a:	8a e0       	ldi	r24, 0x0A	; 10
		Next_ManualState(VRHG);
 50c:	89 df       	rcall	.-238    	; 0x420 <SetTrafficLight>
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	b4 cf       	rjmp	.-152    	; 0x47a <Next_ManualState>
 512:	08 95       	ret

00000514 <getColor>:
		break;
	}
}
void getColor(char *arrybuff)
{//output the status of the traffic light as a string
 514:	dc 01       	movw	r26, r24
	switch(state) 
 516:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <state>
 51a:	91 30       	cpi	r25, 0x01	; 1
 51c:	71 f0       	breq	.+28     	; 0x53a <getColor+0x26>
 51e:	28 f0       	brcs	.+10     	; 0x52a <getColor+0x16>
 520:	92 30       	cpi	r25, 0x02	; 2
 522:	99 f0       	breq	.+38     	; 0x54a <getColor+0x36>
 524:	93 30       	cpi	r25, 0x03	; 3
 526:	c9 f0       	breq	.+50     	; 0x55a <getColor+0x46>
 528:	08 95       	ret
	{
		case VRHG:
		sprintf(arrybuff, "Vert: R, Hori: G");
 52a:	81 e1       	ldi	r24, 0x11	; 17
 52c:	e8 e1       	ldi	r30, 0x18	; 24
 52e:	f1 e0       	ldi	r31, 0x01	; 1
 530:	01 90       	ld	r0, Z+
 532:	0d 92       	st	X+, r0
 534:	8a 95       	dec	r24
 536:	e1 f7       	brne	.-8      	; 0x530 <getColor+0x1c>
		break;
 538:	08 95       	ret
		
		case VRHY:
		sprintf(arrybuff, "Vert: R, Hori: Y");
 53a:	81 e1       	ldi	r24, 0x11	; 17
 53c:	e9 e2       	ldi	r30, 0x29	; 41
 53e:	f1 e0       	ldi	r31, 0x01	; 1
 540:	01 90       	ld	r0, Z+
 542:	0d 92       	st	X+, r0
 544:	8a 95       	dec	r24
 546:	e1 f7       	brne	.-8      	; 0x540 <getColor+0x2c>
		break;
 548:	08 95       	ret
		
		case VGHR:
		sprintf(arrybuff, "Vert: G, Hori: R");
 54a:	81 e1       	ldi	r24, 0x11	; 17
 54c:	ea e3       	ldi	r30, 0x3A	; 58
 54e:	f1 e0       	ldi	r31, 0x01	; 1
 550:	01 90       	ld	r0, Z+
 552:	0d 92       	st	X+, r0
 554:	8a 95       	dec	r24
 556:	e1 f7       	brne	.-8      	; 0x550 <getColor+0x3c>
		break;
 558:	08 95       	ret
		
		case VYHR:
		sprintf(arrybuff, "Vert: Y, Hori: R");
 55a:	81 e1       	ldi	r24, 0x11	; 17
 55c:	eb e4       	ldi	r30, 0x4B	; 75
 55e:	f1 e0       	ldi	r31, 0x01	; 1
 560:	01 90       	ld	r0, Z+
 562:	0d 92       	st	X+, r0
 564:	8a 95       	dec	r24
 566:	e1 f7       	brne	.-8      	; 0x560 <getColor+0x4c>
 568:	08 95       	ret

0000056a <sprintf>:
 56a:	0f 93       	push	r16
 56c:	1f 93       	push	r17
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
 576:	2e 97       	sbiw	r28, 0x0e	; 14
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	f8 94       	cli
 57c:	de bf       	out	0x3e, r29	; 62
 57e:	0f be       	out	0x3f, r0	; 63
 580:	cd bf       	out	0x3d, r28	; 61
 582:	0d 89       	ldd	r16, Y+21	; 0x15
 584:	1e 89       	ldd	r17, Y+22	; 0x16
 586:	86 e0       	ldi	r24, 0x06	; 6
 588:	8c 83       	std	Y+4, r24	; 0x04
 58a:	1a 83       	std	Y+2, r17	; 0x02
 58c:	09 83       	std	Y+1, r16	; 0x01
 58e:	8f ef       	ldi	r24, 0xFF	; 255
 590:	9f e7       	ldi	r25, 0x7F	; 127
 592:	9e 83       	std	Y+6, r25	; 0x06
 594:	8d 83       	std	Y+5, r24	; 0x05
 596:	ae 01       	movw	r20, r28
 598:	47 5e       	subi	r20, 0xE7	; 231
 59a:	5f 4f       	sbci	r21, 0xFF	; 255
 59c:	6f 89       	ldd	r22, Y+23	; 0x17
 59e:	78 8d       	ldd	r23, Y+24	; 0x18
 5a0:	ce 01       	movw	r24, r28
 5a2:	01 96       	adiw	r24, 0x01	; 1
 5a4:	10 d0       	rcall	.+32     	; 0x5c6 <vfprintf>
 5a6:	ef 81       	ldd	r30, Y+7	; 0x07
 5a8:	f8 85       	ldd	r31, Y+8	; 0x08
 5aa:	e0 0f       	add	r30, r16
 5ac:	f1 1f       	adc	r31, r17
 5ae:	10 82       	st	Z, r1
 5b0:	2e 96       	adiw	r28, 0x0e	; 14
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	f8 94       	cli
 5b6:	de bf       	out	0x3e, r29	; 62
 5b8:	0f be       	out	0x3f, r0	; 63
 5ba:	cd bf       	out	0x3d, r28	; 61
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	1f 91       	pop	r17
 5c2:	0f 91       	pop	r16
 5c4:	08 95       	ret

000005c6 <vfprintf>:
 5c6:	2f 92       	push	r2
 5c8:	3f 92       	push	r3
 5ca:	4f 92       	push	r4
 5cc:	5f 92       	push	r5
 5ce:	6f 92       	push	r6
 5d0:	7f 92       	push	r7
 5d2:	8f 92       	push	r8
 5d4:	9f 92       	push	r9
 5d6:	af 92       	push	r10
 5d8:	bf 92       	push	r11
 5da:	cf 92       	push	r12
 5dc:	df 92       	push	r13
 5de:	ef 92       	push	r14
 5e0:	ff 92       	push	r15
 5e2:	0f 93       	push	r16
 5e4:	1f 93       	push	r17
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
 5ee:	2b 97       	sbiw	r28, 0x0b	; 11
 5f0:	0f b6       	in	r0, 0x3f	; 63
 5f2:	f8 94       	cli
 5f4:	de bf       	out	0x3e, r29	; 62
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	cd bf       	out	0x3d, r28	; 61
 5fa:	6c 01       	movw	r12, r24
 5fc:	7b 01       	movw	r14, r22
 5fe:	8a 01       	movw	r16, r20
 600:	fc 01       	movw	r30, r24
 602:	17 82       	std	Z+7, r1	; 0x07
 604:	16 82       	std	Z+6, r1	; 0x06
 606:	83 81       	ldd	r24, Z+3	; 0x03
 608:	81 ff       	sbrs	r24, 1
 60a:	bf c1       	rjmp	.+894    	; 0x98a <vfprintf+0x3c4>
 60c:	ce 01       	movw	r24, r28
 60e:	01 96       	adiw	r24, 0x01	; 1
 610:	3c 01       	movw	r6, r24
 612:	f6 01       	movw	r30, r12
 614:	93 81       	ldd	r25, Z+3	; 0x03
 616:	f7 01       	movw	r30, r14
 618:	93 fd       	sbrc	r25, 3
 61a:	85 91       	lpm	r24, Z+
 61c:	93 ff       	sbrs	r25, 3
 61e:	81 91       	ld	r24, Z+
 620:	7f 01       	movw	r14, r30
 622:	88 23       	and	r24, r24
 624:	09 f4       	brne	.+2      	; 0x628 <vfprintf+0x62>
 626:	ad c1       	rjmp	.+858    	; 0x982 <vfprintf+0x3bc>
 628:	85 32       	cpi	r24, 0x25	; 37
 62a:	39 f4       	brne	.+14     	; 0x63a <vfprintf+0x74>
 62c:	93 fd       	sbrc	r25, 3
 62e:	85 91       	lpm	r24, Z+
 630:	93 ff       	sbrs	r25, 3
 632:	81 91       	ld	r24, Z+
 634:	7f 01       	movw	r14, r30
 636:	85 32       	cpi	r24, 0x25	; 37
 638:	21 f4       	brne	.+8      	; 0x642 <vfprintf+0x7c>
 63a:	b6 01       	movw	r22, r12
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	d6 d1       	rcall	.+940    	; 0x9ec <fputc>
 640:	e8 cf       	rjmp	.-48     	; 0x612 <vfprintf+0x4c>
 642:	91 2c       	mov	r9, r1
 644:	21 2c       	mov	r2, r1
 646:	31 2c       	mov	r3, r1
 648:	ff e1       	ldi	r31, 0x1F	; 31
 64a:	f3 15       	cp	r31, r3
 64c:	d8 f0       	brcs	.+54     	; 0x684 <vfprintf+0xbe>
 64e:	8b 32       	cpi	r24, 0x2B	; 43
 650:	79 f0       	breq	.+30     	; 0x670 <vfprintf+0xaa>
 652:	38 f4       	brcc	.+14     	; 0x662 <vfprintf+0x9c>
 654:	80 32       	cpi	r24, 0x20	; 32
 656:	79 f0       	breq	.+30     	; 0x676 <vfprintf+0xb0>
 658:	83 32       	cpi	r24, 0x23	; 35
 65a:	a1 f4       	brne	.+40     	; 0x684 <vfprintf+0xbe>
 65c:	23 2d       	mov	r18, r3
 65e:	20 61       	ori	r18, 0x10	; 16
 660:	1d c0       	rjmp	.+58     	; 0x69c <vfprintf+0xd6>
 662:	8d 32       	cpi	r24, 0x2D	; 45
 664:	61 f0       	breq	.+24     	; 0x67e <vfprintf+0xb8>
 666:	80 33       	cpi	r24, 0x30	; 48
 668:	69 f4       	brne	.+26     	; 0x684 <vfprintf+0xbe>
 66a:	23 2d       	mov	r18, r3
 66c:	21 60       	ori	r18, 0x01	; 1
 66e:	16 c0       	rjmp	.+44     	; 0x69c <vfprintf+0xd6>
 670:	83 2d       	mov	r24, r3
 672:	82 60       	ori	r24, 0x02	; 2
 674:	38 2e       	mov	r3, r24
 676:	e3 2d       	mov	r30, r3
 678:	e4 60       	ori	r30, 0x04	; 4
 67a:	3e 2e       	mov	r3, r30
 67c:	2a c0       	rjmp	.+84     	; 0x6d2 <vfprintf+0x10c>
 67e:	f3 2d       	mov	r31, r3
 680:	f8 60       	ori	r31, 0x08	; 8
 682:	1d c0       	rjmp	.+58     	; 0x6be <vfprintf+0xf8>
 684:	37 fc       	sbrc	r3, 7
 686:	2d c0       	rjmp	.+90     	; 0x6e2 <vfprintf+0x11c>
 688:	20 ed       	ldi	r18, 0xD0	; 208
 68a:	28 0f       	add	r18, r24
 68c:	2a 30       	cpi	r18, 0x0A	; 10
 68e:	40 f0       	brcs	.+16     	; 0x6a0 <vfprintf+0xda>
 690:	8e 32       	cpi	r24, 0x2E	; 46
 692:	b9 f4       	brne	.+46     	; 0x6c2 <vfprintf+0xfc>
 694:	36 fc       	sbrc	r3, 6
 696:	75 c1       	rjmp	.+746    	; 0x982 <vfprintf+0x3bc>
 698:	23 2d       	mov	r18, r3
 69a:	20 64       	ori	r18, 0x40	; 64
 69c:	32 2e       	mov	r3, r18
 69e:	19 c0       	rjmp	.+50     	; 0x6d2 <vfprintf+0x10c>
 6a0:	36 fe       	sbrs	r3, 6
 6a2:	06 c0       	rjmp	.+12     	; 0x6b0 <vfprintf+0xea>
 6a4:	8a e0       	ldi	r24, 0x0A	; 10
 6a6:	98 9e       	mul	r9, r24
 6a8:	20 0d       	add	r18, r0
 6aa:	11 24       	eor	r1, r1
 6ac:	92 2e       	mov	r9, r18
 6ae:	11 c0       	rjmp	.+34     	; 0x6d2 <vfprintf+0x10c>
 6b0:	ea e0       	ldi	r30, 0x0A	; 10
 6b2:	2e 9e       	mul	r2, r30
 6b4:	20 0d       	add	r18, r0
 6b6:	11 24       	eor	r1, r1
 6b8:	22 2e       	mov	r2, r18
 6ba:	f3 2d       	mov	r31, r3
 6bc:	f0 62       	ori	r31, 0x20	; 32
 6be:	3f 2e       	mov	r3, r31
 6c0:	08 c0       	rjmp	.+16     	; 0x6d2 <vfprintf+0x10c>
 6c2:	8c 36       	cpi	r24, 0x6C	; 108
 6c4:	21 f4       	brne	.+8      	; 0x6ce <vfprintf+0x108>
 6c6:	83 2d       	mov	r24, r3
 6c8:	80 68       	ori	r24, 0x80	; 128
 6ca:	38 2e       	mov	r3, r24
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <vfprintf+0x10c>
 6ce:	88 36       	cpi	r24, 0x68	; 104
 6d0:	41 f4       	brne	.+16     	; 0x6e2 <vfprintf+0x11c>
 6d2:	f7 01       	movw	r30, r14
 6d4:	93 fd       	sbrc	r25, 3
 6d6:	85 91       	lpm	r24, Z+
 6d8:	93 ff       	sbrs	r25, 3
 6da:	81 91       	ld	r24, Z+
 6dc:	7f 01       	movw	r14, r30
 6de:	81 11       	cpse	r24, r1
 6e0:	b3 cf       	rjmp	.-154    	; 0x648 <vfprintf+0x82>
 6e2:	98 2f       	mov	r25, r24
 6e4:	9f 7d       	andi	r25, 0xDF	; 223
 6e6:	95 54       	subi	r25, 0x45	; 69
 6e8:	93 30       	cpi	r25, 0x03	; 3
 6ea:	28 f4       	brcc	.+10     	; 0x6f6 <vfprintf+0x130>
 6ec:	0c 5f       	subi	r16, 0xFC	; 252
 6ee:	1f 4f       	sbci	r17, 0xFF	; 255
 6f0:	9f e3       	ldi	r25, 0x3F	; 63
 6f2:	99 83       	std	Y+1, r25	; 0x01
 6f4:	0d c0       	rjmp	.+26     	; 0x710 <vfprintf+0x14a>
 6f6:	83 36       	cpi	r24, 0x63	; 99
 6f8:	31 f0       	breq	.+12     	; 0x706 <vfprintf+0x140>
 6fa:	83 37       	cpi	r24, 0x73	; 115
 6fc:	71 f0       	breq	.+28     	; 0x71a <vfprintf+0x154>
 6fe:	83 35       	cpi	r24, 0x53	; 83
 700:	09 f0       	breq	.+2      	; 0x704 <vfprintf+0x13e>
 702:	55 c0       	rjmp	.+170    	; 0x7ae <vfprintf+0x1e8>
 704:	20 c0       	rjmp	.+64     	; 0x746 <vfprintf+0x180>
 706:	f8 01       	movw	r30, r16
 708:	80 81       	ld	r24, Z
 70a:	89 83       	std	Y+1, r24	; 0x01
 70c:	0e 5f       	subi	r16, 0xFE	; 254
 70e:	1f 4f       	sbci	r17, 0xFF	; 255
 710:	88 24       	eor	r8, r8
 712:	83 94       	inc	r8
 714:	91 2c       	mov	r9, r1
 716:	53 01       	movw	r10, r6
 718:	12 c0       	rjmp	.+36     	; 0x73e <vfprintf+0x178>
 71a:	28 01       	movw	r4, r16
 71c:	f2 e0       	ldi	r31, 0x02	; 2
 71e:	4f 0e       	add	r4, r31
 720:	51 1c       	adc	r5, r1
 722:	f8 01       	movw	r30, r16
 724:	a0 80       	ld	r10, Z
 726:	b1 80       	ldd	r11, Z+1	; 0x01
 728:	36 fe       	sbrs	r3, 6
 72a:	03 c0       	rjmp	.+6      	; 0x732 <vfprintf+0x16c>
 72c:	69 2d       	mov	r22, r9
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <vfprintf+0x170>
 732:	6f ef       	ldi	r22, 0xFF	; 255
 734:	7f ef       	ldi	r23, 0xFF	; 255
 736:	c5 01       	movw	r24, r10
 738:	4e d1       	rcall	.+668    	; 0x9d6 <strnlen>
 73a:	4c 01       	movw	r8, r24
 73c:	82 01       	movw	r16, r4
 73e:	f3 2d       	mov	r31, r3
 740:	ff 77       	andi	r31, 0x7F	; 127
 742:	3f 2e       	mov	r3, r31
 744:	15 c0       	rjmp	.+42     	; 0x770 <vfprintf+0x1aa>
 746:	28 01       	movw	r4, r16
 748:	22 e0       	ldi	r18, 0x02	; 2
 74a:	42 0e       	add	r4, r18
 74c:	51 1c       	adc	r5, r1
 74e:	f8 01       	movw	r30, r16
 750:	a0 80       	ld	r10, Z
 752:	b1 80       	ldd	r11, Z+1	; 0x01
 754:	36 fe       	sbrs	r3, 6
 756:	03 c0       	rjmp	.+6      	; 0x75e <vfprintf+0x198>
 758:	69 2d       	mov	r22, r9
 75a:	70 e0       	ldi	r23, 0x00	; 0
 75c:	02 c0       	rjmp	.+4      	; 0x762 <vfprintf+0x19c>
 75e:	6f ef       	ldi	r22, 0xFF	; 255
 760:	7f ef       	ldi	r23, 0xFF	; 255
 762:	c5 01       	movw	r24, r10
 764:	2d d1       	rcall	.+602    	; 0x9c0 <strnlen_P>
 766:	4c 01       	movw	r8, r24
 768:	f3 2d       	mov	r31, r3
 76a:	f0 68       	ori	r31, 0x80	; 128
 76c:	3f 2e       	mov	r3, r31
 76e:	82 01       	movw	r16, r4
 770:	33 fc       	sbrc	r3, 3
 772:	19 c0       	rjmp	.+50     	; 0x7a6 <vfprintf+0x1e0>
 774:	82 2d       	mov	r24, r2
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	88 16       	cp	r8, r24
 77a:	99 06       	cpc	r9, r25
 77c:	a0 f4       	brcc	.+40     	; 0x7a6 <vfprintf+0x1e0>
 77e:	b6 01       	movw	r22, r12
 780:	80 e2       	ldi	r24, 0x20	; 32
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	33 d1       	rcall	.+614    	; 0x9ec <fputc>
 786:	2a 94       	dec	r2
 788:	f5 cf       	rjmp	.-22     	; 0x774 <vfprintf+0x1ae>
 78a:	f5 01       	movw	r30, r10
 78c:	37 fc       	sbrc	r3, 7
 78e:	85 91       	lpm	r24, Z+
 790:	37 fe       	sbrs	r3, 7
 792:	81 91       	ld	r24, Z+
 794:	5f 01       	movw	r10, r30
 796:	b6 01       	movw	r22, r12
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	28 d1       	rcall	.+592    	; 0x9ec <fputc>
 79c:	21 10       	cpse	r2, r1
 79e:	2a 94       	dec	r2
 7a0:	21 e0       	ldi	r18, 0x01	; 1
 7a2:	82 1a       	sub	r8, r18
 7a4:	91 08       	sbc	r9, r1
 7a6:	81 14       	cp	r8, r1
 7a8:	91 04       	cpc	r9, r1
 7aa:	79 f7       	brne	.-34     	; 0x78a <vfprintf+0x1c4>
 7ac:	e1 c0       	rjmp	.+450    	; 0x970 <vfprintf+0x3aa>
 7ae:	84 36       	cpi	r24, 0x64	; 100
 7b0:	11 f0       	breq	.+4      	; 0x7b6 <vfprintf+0x1f0>
 7b2:	89 36       	cpi	r24, 0x69	; 105
 7b4:	39 f5       	brne	.+78     	; 0x804 <vfprintf+0x23e>
 7b6:	f8 01       	movw	r30, r16
 7b8:	37 fe       	sbrs	r3, 7
 7ba:	07 c0       	rjmp	.+14     	; 0x7ca <vfprintf+0x204>
 7bc:	60 81       	ld	r22, Z
 7be:	71 81       	ldd	r23, Z+1	; 0x01
 7c0:	82 81       	ldd	r24, Z+2	; 0x02
 7c2:	93 81       	ldd	r25, Z+3	; 0x03
 7c4:	0c 5f       	subi	r16, 0xFC	; 252
 7c6:	1f 4f       	sbci	r17, 0xFF	; 255
 7c8:	08 c0       	rjmp	.+16     	; 0x7da <vfprintf+0x214>
 7ca:	60 81       	ld	r22, Z
 7cc:	71 81       	ldd	r23, Z+1	; 0x01
 7ce:	07 2e       	mov	r0, r23
 7d0:	00 0c       	add	r0, r0
 7d2:	88 0b       	sbc	r24, r24
 7d4:	99 0b       	sbc	r25, r25
 7d6:	0e 5f       	subi	r16, 0xFE	; 254
 7d8:	1f 4f       	sbci	r17, 0xFF	; 255
 7da:	f3 2d       	mov	r31, r3
 7dc:	ff 76       	andi	r31, 0x6F	; 111
 7de:	3f 2e       	mov	r3, r31
 7e0:	97 ff       	sbrs	r25, 7
 7e2:	09 c0       	rjmp	.+18     	; 0x7f6 <vfprintf+0x230>
 7e4:	90 95       	com	r25
 7e6:	80 95       	com	r24
 7e8:	70 95       	com	r23
 7ea:	61 95       	neg	r22
 7ec:	7f 4f       	sbci	r23, 0xFF	; 255
 7ee:	8f 4f       	sbci	r24, 0xFF	; 255
 7f0:	9f 4f       	sbci	r25, 0xFF	; 255
 7f2:	f0 68       	ori	r31, 0x80	; 128
 7f4:	3f 2e       	mov	r3, r31
 7f6:	2a e0       	ldi	r18, 0x0A	; 10
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	a3 01       	movw	r20, r6
 7fc:	33 d1       	rcall	.+614    	; 0xa64 <__ultoa_invert>
 7fe:	88 2e       	mov	r8, r24
 800:	86 18       	sub	r8, r6
 802:	44 c0       	rjmp	.+136    	; 0x88c <vfprintf+0x2c6>
 804:	85 37       	cpi	r24, 0x75	; 117
 806:	31 f4       	brne	.+12     	; 0x814 <vfprintf+0x24e>
 808:	23 2d       	mov	r18, r3
 80a:	2f 7e       	andi	r18, 0xEF	; 239
 80c:	b2 2e       	mov	r11, r18
 80e:	2a e0       	ldi	r18, 0x0A	; 10
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	25 c0       	rjmp	.+74     	; 0x85e <vfprintf+0x298>
 814:	93 2d       	mov	r25, r3
 816:	99 7f       	andi	r25, 0xF9	; 249
 818:	b9 2e       	mov	r11, r25
 81a:	8f 36       	cpi	r24, 0x6F	; 111
 81c:	c1 f0       	breq	.+48     	; 0x84e <vfprintf+0x288>
 81e:	18 f4       	brcc	.+6      	; 0x826 <vfprintf+0x260>
 820:	88 35       	cpi	r24, 0x58	; 88
 822:	79 f0       	breq	.+30     	; 0x842 <vfprintf+0x27c>
 824:	ae c0       	rjmp	.+348    	; 0x982 <vfprintf+0x3bc>
 826:	80 37       	cpi	r24, 0x70	; 112
 828:	19 f0       	breq	.+6      	; 0x830 <vfprintf+0x26a>
 82a:	88 37       	cpi	r24, 0x78	; 120
 82c:	21 f0       	breq	.+8      	; 0x836 <vfprintf+0x270>
 82e:	a9 c0       	rjmp	.+338    	; 0x982 <vfprintf+0x3bc>
 830:	e9 2f       	mov	r30, r25
 832:	e0 61       	ori	r30, 0x10	; 16
 834:	be 2e       	mov	r11, r30
 836:	b4 fe       	sbrs	r11, 4
 838:	0d c0       	rjmp	.+26     	; 0x854 <vfprintf+0x28e>
 83a:	fb 2d       	mov	r31, r11
 83c:	f4 60       	ori	r31, 0x04	; 4
 83e:	bf 2e       	mov	r11, r31
 840:	09 c0       	rjmp	.+18     	; 0x854 <vfprintf+0x28e>
 842:	34 fe       	sbrs	r3, 4
 844:	0a c0       	rjmp	.+20     	; 0x85a <vfprintf+0x294>
 846:	29 2f       	mov	r18, r25
 848:	26 60       	ori	r18, 0x06	; 6
 84a:	b2 2e       	mov	r11, r18
 84c:	06 c0       	rjmp	.+12     	; 0x85a <vfprintf+0x294>
 84e:	28 e0       	ldi	r18, 0x08	; 8
 850:	30 e0       	ldi	r19, 0x00	; 0
 852:	05 c0       	rjmp	.+10     	; 0x85e <vfprintf+0x298>
 854:	20 e1       	ldi	r18, 0x10	; 16
 856:	30 e0       	ldi	r19, 0x00	; 0
 858:	02 c0       	rjmp	.+4      	; 0x85e <vfprintf+0x298>
 85a:	20 e1       	ldi	r18, 0x10	; 16
 85c:	32 e0       	ldi	r19, 0x02	; 2
 85e:	f8 01       	movw	r30, r16
 860:	b7 fe       	sbrs	r11, 7
 862:	07 c0       	rjmp	.+14     	; 0x872 <vfprintf+0x2ac>
 864:	60 81       	ld	r22, Z
 866:	71 81       	ldd	r23, Z+1	; 0x01
 868:	82 81       	ldd	r24, Z+2	; 0x02
 86a:	93 81       	ldd	r25, Z+3	; 0x03
 86c:	0c 5f       	subi	r16, 0xFC	; 252
 86e:	1f 4f       	sbci	r17, 0xFF	; 255
 870:	06 c0       	rjmp	.+12     	; 0x87e <vfprintf+0x2b8>
 872:	60 81       	ld	r22, Z
 874:	71 81       	ldd	r23, Z+1	; 0x01
 876:	80 e0       	ldi	r24, 0x00	; 0
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	0e 5f       	subi	r16, 0xFE	; 254
 87c:	1f 4f       	sbci	r17, 0xFF	; 255
 87e:	a3 01       	movw	r20, r6
 880:	f1 d0       	rcall	.+482    	; 0xa64 <__ultoa_invert>
 882:	88 2e       	mov	r8, r24
 884:	86 18       	sub	r8, r6
 886:	fb 2d       	mov	r31, r11
 888:	ff 77       	andi	r31, 0x7F	; 127
 88a:	3f 2e       	mov	r3, r31
 88c:	36 fe       	sbrs	r3, 6
 88e:	0d c0       	rjmp	.+26     	; 0x8aa <vfprintf+0x2e4>
 890:	23 2d       	mov	r18, r3
 892:	2e 7f       	andi	r18, 0xFE	; 254
 894:	a2 2e       	mov	r10, r18
 896:	89 14       	cp	r8, r9
 898:	58 f4       	brcc	.+22     	; 0x8b0 <vfprintf+0x2ea>
 89a:	34 fe       	sbrs	r3, 4
 89c:	0b c0       	rjmp	.+22     	; 0x8b4 <vfprintf+0x2ee>
 89e:	32 fc       	sbrc	r3, 2
 8a0:	09 c0       	rjmp	.+18     	; 0x8b4 <vfprintf+0x2ee>
 8a2:	83 2d       	mov	r24, r3
 8a4:	8e 7e       	andi	r24, 0xEE	; 238
 8a6:	a8 2e       	mov	r10, r24
 8a8:	05 c0       	rjmp	.+10     	; 0x8b4 <vfprintf+0x2ee>
 8aa:	b8 2c       	mov	r11, r8
 8ac:	a3 2c       	mov	r10, r3
 8ae:	03 c0       	rjmp	.+6      	; 0x8b6 <vfprintf+0x2f0>
 8b0:	b8 2c       	mov	r11, r8
 8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <vfprintf+0x2f0>
 8b4:	b9 2c       	mov	r11, r9
 8b6:	a4 fe       	sbrs	r10, 4
 8b8:	0f c0       	rjmp	.+30     	; 0x8d8 <vfprintf+0x312>
 8ba:	fe 01       	movw	r30, r28
 8bc:	e8 0d       	add	r30, r8
 8be:	f1 1d       	adc	r31, r1
 8c0:	80 81       	ld	r24, Z
 8c2:	80 33       	cpi	r24, 0x30	; 48
 8c4:	21 f4       	brne	.+8      	; 0x8ce <vfprintf+0x308>
 8c6:	9a 2d       	mov	r25, r10
 8c8:	99 7e       	andi	r25, 0xE9	; 233
 8ca:	a9 2e       	mov	r10, r25
 8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <vfprintf+0x31a>
 8ce:	a2 fe       	sbrs	r10, 2
 8d0:	06 c0       	rjmp	.+12     	; 0x8de <vfprintf+0x318>
 8d2:	b3 94       	inc	r11
 8d4:	b3 94       	inc	r11
 8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <vfprintf+0x31a>
 8d8:	8a 2d       	mov	r24, r10
 8da:	86 78       	andi	r24, 0x86	; 134
 8dc:	09 f0       	breq	.+2      	; 0x8e0 <vfprintf+0x31a>
 8de:	b3 94       	inc	r11
 8e0:	a3 fc       	sbrc	r10, 3
 8e2:	10 c0       	rjmp	.+32     	; 0x904 <vfprintf+0x33e>
 8e4:	a0 fe       	sbrs	r10, 0
 8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <vfprintf+0x32e>
 8e8:	b2 14       	cp	r11, r2
 8ea:	80 f4       	brcc	.+32     	; 0x90c <vfprintf+0x346>
 8ec:	28 0c       	add	r2, r8
 8ee:	92 2c       	mov	r9, r2
 8f0:	9b 18       	sub	r9, r11
 8f2:	0d c0       	rjmp	.+26     	; 0x90e <vfprintf+0x348>
 8f4:	b2 14       	cp	r11, r2
 8f6:	58 f4       	brcc	.+22     	; 0x90e <vfprintf+0x348>
 8f8:	b6 01       	movw	r22, r12
 8fa:	80 e2       	ldi	r24, 0x20	; 32
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	76 d0       	rcall	.+236    	; 0x9ec <fputc>
 900:	b3 94       	inc	r11
 902:	f8 cf       	rjmp	.-16     	; 0x8f4 <vfprintf+0x32e>
 904:	b2 14       	cp	r11, r2
 906:	18 f4       	brcc	.+6      	; 0x90e <vfprintf+0x348>
 908:	2b 18       	sub	r2, r11
 90a:	02 c0       	rjmp	.+4      	; 0x910 <vfprintf+0x34a>
 90c:	98 2c       	mov	r9, r8
 90e:	21 2c       	mov	r2, r1
 910:	a4 fe       	sbrs	r10, 4
 912:	0f c0       	rjmp	.+30     	; 0x932 <vfprintf+0x36c>
 914:	b6 01       	movw	r22, r12
 916:	80 e3       	ldi	r24, 0x30	; 48
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	68 d0       	rcall	.+208    	; 0x9ec <fputc>
 91c:	a2 fe       	sbrs	r10, 2
 91e:	16 c0       	rjmp	.+44     	; 0x94c <vfprintf+0x386>
 920:	a1 fc       	sbrc	r10, 1
 922:	03 c0       	rjmp	.+6      	; 0x92a <vfprintf+0x364>
 924:	88 e7       	ldi	r24, 0x78	; 120
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	02 c0       	rjmp	.+4      	; 0x92e <vfprintf+0x368>
 92a:	88 e5       	ldi	r24, 0x58	; 88
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	b6 01       	movw	r22, r12
 930:	0c c0       	rjmp	.+24     	; 0x94a <vfprintf+0x384>
 932:	8a 2d       	mov	r24, r10
 934:	86 78       	andi	r24, 0x86	; 134
 936:	51 f0       	breq	.+20     	; 0x94c <vfprintf+0x386>
 938:	a1 fe       	sbrs	r10, 1
 93a:	02 c0       	rjmp	.+4      	; 0x940 <vfprintf+0x37a>
 93c:	8b e2       	ldi	r24, 0x2B	; 43
 93e:	01 c0       	rjmp	.+2      	; 0x942 <vfprintf+0x37c>
 940:	80 e2       	ldi	r24, 0x20	; 32
 942:	a7 fc       	sbrc	r10, 7
 944:	8d e2       	ldi	r24, 0x2D	; 45
 946:	b6 01       	movw	r22, r12
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	50 d0       	rcall	.+160    	; 0x9ec <fputc>
 94c:	89 14       	cp	r8, r9
 94e:	30 f4       	brcc	.+12     	; 0x95c <vfprintf+0x396>
 950:	b6 01       	movw	r22, r12
 952:	80 e3       	ldi	r24, 0x30	; 48
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	4a d0       	rcall	.+148    	; 0x9ec <fputc>
 958:	9a 94       	dec	r9
 95a:	f8 cf       	rjmp	.-16     	; 0x94c <vfprintf+0x386>
 95c:	8a 94       	dec	r8
 95e:	f3 01       	movw	r30, r6
 960:	e8 0d       	add	r30, r8
 962:	f1 1d       	adc	r31, r1
 964:	80 81       	ld	r24, Z
 966:	b6 01       	movw	r22, r12
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	40 d0       	rcall	.+128    	; 0x9ec <fputc>
 96c:	81 10       	cpse	r8, r1
 96e:	f6 cf       	rjmp	.-20     	; 0x95c <vfprintf+0x396>
 970:	22 20       	and	r2, r2
 972:	09 f4       	brne	.+2      	; 0x976 <vfprintf+0x3b0>
 974:	4e ce       	rjmp	.-868    	; 0x612 <vfprintf+0x4c>
 976:	b6 01       	movw	r22, r12
 978:	80 e2       	ldi	r24, 0x20	; 32
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	37 d0       	rcall	.+110    	; 0x9ec <fputc>
 97e:	2a 94       	dec	r2
 980:	f7 cf       	rjmp	.-18     	; 0x970 <vfprintf+0x3aa>
 982:	f6 01       	movw	r30, r12
 984:	86 81       	ldd	r24, Z+6	; 0x06
 986:	97 81       	ldd	r25, Z+7	; 0x07
 988:	02 c0       	rjmp	.+4      	; 0x98e <vfprintf+0x3c8>
 98a:	8f ef       	ldi	r24, 0xFF	; 255
 98c:	9f ef       	ldi	r25, 0xFF	; 255
 98e:	2b 96       	adiw	r28, 0x0b	; 11
 990:	0f b6       	in	r0, 0x3f	; 63
 992:	f8 94       	cli
 994:	de bf       	out	0x3e, r29	; 62
 996:	0f be       	out	0x3f, r0	; 63
 998:	cd bf       	out	0x3d, r28	; 61
 99a:	df 91       	pop	r29
 99c:	cf 91       	pop	r28
 99e:	1f 91       	pop	r17
 9a0:	0f 91       	pop	r16
 9a2:	ff 90       	pop	r15
 9a4:	ef 90       	pop	r14
 9a6:	df 90       	pop	r13
 9a8:	cf 90       	pop	r12
 9aa:	bf 90       	pop	r11
 9ac:	af 90       	pop	r10
 9ae:	9f 90       	pop	r9
 9b0:	8f 90       	pop	r8
 9b2:	7f 90       	pop	r7
 9b4:	6f 90       	pop	r6
 9b6:	5f 90       	pop	r5
 9b8:	4f 90       	pop	r4
 9ba:	3f 90       	pop	r3
 9bc:	2f 90       	pop	r2
 9be:	08 95       	ret

000009c0 <strnlen_P>:
 9c0:	fc 01       	movw	r30, r24
 9c2:	05 90       	lpm	r0, Z+
 9c4:	61 50       	subi	r22, 0x01	; 1
 9c6:	70 40       	sbci	r23, 0x00	; 0
 9c8:	01 10       	cpse	r0, r1
 9ca:	d8 f7       	brcc	.-10     	; 0x9c2 <strnlen_P+0x2>
 9cc:	80 95       	com	r24
 9ce:	90 95       	com	r25
 9d0:	8e 0f       	add	r24, r30
 9d2:	9f 1f       	adc	r25, r31
 9d4:	08 95       	ret

000009d6 <strnlen>:
 9d6:	fc 01       	movw	r30, r24
 9d8:	61 50       	subi	r22, 0x01	; 1
 9da:	70 40       	sbci	r23, 0x00	; 0
 9dc:	01 90       	ld	r0, Z+
 9de:	01 10       	cpse	r0, r1
 9e0:	d8 f7       	brcc	.-10     	; 0x9d8 <strnlen+0x2>
 9e2:	80 95       	com	r24
 9e4:	90 95       	com	r25
 9e6:	8e 0f       	add	r24, r30
 9e8:	9f 1f       	adc	r25, r31
 9ea:	08 95       	ret

000009ec <fputc>:
 9ec:	0f 93       	push	r16
 9ee:	1f 93       	push	r17
 9f0:	cf 93       	push	r28
 9f2:	df 93       	push	r29
 9f4:	fb 01       	movw	r30, r22
 9f6:	23 81       	ldd	r18, Z+3	; 0x03
 9f8:	21 fd       	sbrc	r18, 1
 9fa:	03 c0       	rjmp	.+6      	; 0xa02 <fputc+0x16>
 9fc:	8f ef       	ldi	r24, 0xFF	; 255
 9fe:	9f ef       	ldi	r25, 0xFF	; 255
 a00:	2c c0       	rjmp	.+88     	; 0xa5a <fputc+0x6e>
 a02:	22 ff       	sbrs	r18, 2
 a04:	16 c0       	rjmp	.+44     	; 0xa32 <fputc+0x46>
 a06:	46 81       	ldd	r20, Z+6	; 0x06
 a08:	57 81       	ldd	r21, Z+7	; 0x07
 a0a:	24 81       	ldd	r18, Z+4	; 0x04
 a0c:	35 81       	ldd	r19, Z+5	; 0x05
 a0e:	42 17       	cp	r20, r18
 a10:	53 07       	cpc	r21, r19
 a12:	44 f4       	brge	.+16     	; 0xa24 <fputc+0x38>
 a14:	a0 81       	ld	r26, Z
 a16:	b1 81       	ldd	r27, Z+1	; 0x01
 a18:	9d 01       	movw	r18, r26
 a1a:	2f 5f       	subi	r18, 0xFF	; 255
 a1c:	3f 4f       	sbci	r19, 0xFF	; 255
 a1e:	31 83       	std	Z+1, r19	; 0x01
 a20:	20 83       	st	Z, r18
 a22:	8c 93       	st	X, r24
 a24:	26 81       	ldd	r18, Z+6	; 0x06
 a26:	37 81       	ldd	r19, Z+7	; 0x07
 a28:	2f 5f       	subi	r18, 0xFF	; 255
 a2a:	3f 4f       	sbci	r19, 0xFF	; 255
 a2c:	37 83       	std	Z+7, r19	; 0x07
 a2e:	26 83       	std	Z+6, r18	; 0x06
 a30:	14 c0       	rjmp	.+40     	; 0xa5a <fputc+0x6e>
 a32:	8b 01       	movw	r16, r22
 a34:	ec 01       	movw	r28, r24
 a36:	fb 01       	movw	r30, r22
 a38:	00 84       	ldd	r0, Z+8	; 0x08
 a3a:	f1 85       	ldd	r31, Z+9	; 0x09
 a3c:	e0 2d       	mov	r30, r0
 a3e:	09 95       	icall
 a40:	89 2b       	or	r24, r25
 a42:	e1 f6       	brne	.-72     	; 0x9fc <fputc+0x10>
 a44:	d8 01       	movw	r26, r16
 a46:	16 96       	adiw	r26, 0x06	; 6
 a48:	8d 91       	ld	r24, X+
 a4a:	9c 91       	ld	r25, X
 a4c:	17 97       	sbiw	r26, 0x07	; 7
 a4e:	01 96       	adiw	r24, 0x01	; 1
 a50:	17 96       	adiw	r26, 0x07	; 7
 a52:	9c 93       	st	X, r25
 a54:	8e 93       	st	-X, r24
 a56:	16 97       	sbiw	r26, 0x06	; 6
 a58:	ce 01       	movw	r24, r28
 a5a:	df 91       	pop	r29
 a5c:	cf 91       	pop	r28
 a5e:	1f 91       	pop	r17
 a60:	0f 91       	pop	r16
 a62:	08 95       	ret

00000a64 <__ultoa_invert>:
 a64:	fa 01       	movw	r30, r20
 a66:	aa 27       	eor	r26, r26
 a68:	28 30       	cpi	r18, 0x08	; 8
 a6a:	51 f1       	breq	.+84     	; 0xac0 <__ultoa_invert+0x5c>
 a6c:	20 31       	cpi	r18, 0x10	; 16
 a6e:	81 f1       	breq	.+96     	; 0xad0 <__ultoa_invert+0x6c>
 a70:	e8 94       	clt
 a72:	6f 93       	push	r22
 a74:	6e 7f       	andi	r22, 0xFE	; 254
 a76:	6e 5f       	subi	r22, 0xFE	; 254
 a78:	7f 4f       	sbci	r23, 0xFF	; 255
 a7a:	8f 4f       	sbci	r24, 0xFF	; 255
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	af 4f       	sbci	r26, 0xFF	; 255
 a80:	b1 e0       	ldi	r27, 0x01	; 1
 a82:	3e d0       	rcall	.+124    	; 0xb00 <__ultoa_invert+0x9c>
 a84:	b4 e0       	ldi	r27, 0x04	; 4
 a86:	3c d0       	rcall	.+120    	; 0xb00 <__ultoa_invert+0x9c>
 a88:	67 0f       	add	r22, r23
 a8a:	78 1f       	adc	r23, r24
 a8c:	89 1f       	adc	r24, r25
 a8e:	9a 1f       	adc	r25, r26
 a90:	a1 1d       	adc	r26, r1
 a92:	68 0f       	add	r22, r24
 a94:	79 1f       	adc	r23, r25
 a96:	8a 1f       	adc	r24, r26
 a98:	91 1d       	adc	r25, r1
 a9a:	a1 1d       	adc	r26, r1
 a9c:	6a 0f       	add	r22, r26
 a9e:	71 1d       	adc	r23, r1
 aa0:	81 1d       	adc	r24, r1
 aa2:	91 1d       	adc	r25, r1
 aa4:	a1 1d       	adc	r26, r1
 aa6:	20 d0       	rcall	.+64     	; 0xae8 <__ultoa_invert+0x84>
 aa8:	09 f4       	brne	.+2      	; 0xaac <__ultoa_invert+0x48>
 aaa:	68 94       	set
 aac:	3f 91       	pop	r19
 aae:	2a e0       	ldi	r18, 0x0A	; 10
 ab0:	26 9f       	mul	r18, r22
 ab2:	11 24       	eor	r1, r1
 ab4:	30 19       	sub	r19, r0
 ab6:	30 5d       	subi	r19, 0xD0	; 208
 ab8:	31 93       	st	Z+, r19
 aba:	de f6       	brtc	.-74     	; 0xa72 <__ultoa_invert+0xe>
 abc:	cf 01       	movw	r24, r30
 abe:	08 95       	ret
 ac0:	46 2f       	mov	r20, r22
 ac2:	47 70       	andi	r20, 0x07	; 7
 ac4:	40 5d       	subi	r20, 0xD0	; 208
 ac6:	41 93       	st	Z+, r20
 ac8:	b3 e0       	ldi	r27, 0x03	; 3
 aca:	0f d0       	rcall	.+30     	; 0xaea <__ultoa_invert+0x86>
 acc:	c9 f7       	brne	.-14     	; 0xac0 <__ultoa_invert+0x5c>
 ace:	f6 cf       	rjmp	.-20     	; 0xabc <__ultoa_invert+0x58>
 ad0:	46 2f       	mov	r20, r22
 ad2:	4f 70       	andi	r20, 0x0F	; 15
 ad4:	40 5d       	subi	r20, 0xD0	; 208
 ad6:	4a 33       	cpi	r20, 0x3A	; 58
 ad8:	18 f0       	brcs	.+6      	; 0xae0 <__ultoa_invert+0x7c>
 ada:	49 5d       	subi	r20, 0xD9	; 217
 adc:	31 fd       	sbrc	r19, 1
 ade:	40 52       	subi	r20, 0x20	; 32
 ae0:	41 93       	st	Z+, r20
 ae2:	02 d0       	rcall	.+4      	; 0xae8 <__ultoa_invert+0x84>
 ae4:	a9 f7       	brne	.-22     	; 0xad0 <__ultoa_invert+0x6c>
 ae6:	ea cf       	rjmp	.-44     	; 0xabc <__ultoa_invert+0x58>
 ae8:	b4 e0       	ldi	r27, 0x04	; 4
 aea:	a6 95       	lsr	r26
 aec:	97 95       	ror	r25
 aee:	87 95       	ror	r24
 af0:	77 95       	ror	r23
 af2:	67 95       	ror	r22
 af4:	ba 95       	dec	r27
 af6:	c9 f7       	brne	.-14     	; 0xaea <__ultoa_invert+0x86>
 af8:	00 97       	sbiw	r24, 0x00	; 0
 afa:	61 05       	cpc	r22, r1
 afc:	71 05       	cpc	r23, r1
 afe:	08 95       	ret
 b00:	9b 01       	movw	r18, r22
 b02:	ac 01       	movw	r20, r24
 b04:	0a 2e       	mov	r0, r26
 b06:	06 94       	lsr	r0
 b08:	57 95       	ror	r21
 b0a:	47 95       	ror	r20
 b0c:	37 95       	ror	r19
 b0e:	27 95       	ror	r18
 b10:	ba 95       	dec	r27
 b12:	c9 f7       	brne	.-14     	; 0xb06 <__ultoa_invert+0xa2>
 b14:	62 0f       	add	r22, r18
 b16:	73 1f       	adc	r23, r19
 b18:	84 1f       	adc	r24, r20
 b1a:	95 1f       	adc	r25, r21
 b1c:	a0 1d       	adc	r26, r0
 b1e:	08 95       	ret

00000b20 <_exit>:
 b20:	f8 94       	cli

00000b22 <__stop_program>:
 b22:	ff cf       	rjmp	.-2      	; 0xb22 <__stop_program>
